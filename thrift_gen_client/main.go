package main

import (
	"fmt"
	"github.com/athom/suitecase"
	"go/ast"
	"go/parser"
	"go/token"
	"log"
	"os"
	"path/filepath"
	"strings"
	"text/template"
)

var (
	generatedTemplate = template.Must(template.New("render").Parse(
		`// generated by thrift_helper -- DO NOT EDIT
package {{.Package}}

import (
	"gopkg.in/tamtam-im/goth.v1"
	"gopkg.in/tamtam-im/goth.v1/hub"
	"gopkg.in/tamtam-im/goth.v1/hub/pool"
)

// Return client transport to pool
func (c *{{.Svc}}Client) Close() {
	c.Transport.(*pool.TPooledTransport).Release()
}

{{ if .Def }}
// Get default client for {{.Svc}} service
func NewClient(options ...*hub.TOptions) (res *{{.Svc}}Client, err error) {
	opts := hub.GetTOptions(options...)
	t, err := opts.HubFactory().Take(opts, "{{.Package}}")
	if err != nil {
		return
	}
	res = New{{.Svc}}ClientFactory(t, opts.ProtoFactory())
	return
}
{{ end }}

// Get new multiplexed client for {{.Svc}} service
func New{{.Svc}}Client(options ...*hub.TOptions) (res *{{.Svc}}Client, err error) {
	opts := hub.GetTOptions(options...)
	t, err := opts.HubFactory().Take(opts, "{{.Package}}")
	if err != nil {
		return
	}
	p := goth.NewTMultiplexedProtocolFactory("{{.Svc}}", opts.ProtoFactory())
	res = New{{.Svc}}ClientFactory(t, p)
	return
}
`))
)

func main() {
	fmt.Println("==> generate", os.Args[2:])
	mk(os.Args[1])
	//	renderFile(spec)
}

// Extracted thrift
type ThriftCli struct {
	// Package
	Package string

	// Client names
	Svc string

	// Default client name
	Def bool

	// Fname
	Fname string
}

func mkFile(path string, fi os.FileInfo) (err error) {
	fset := token.NewFileSet()
	f, err := parser.ParseFile(fset, path, nil, parser.ParseComments)
	if err != nil {
		log.Fatalf("Could not parse file: %s", err)
	}

	res := &ThriftCli{
		Package: f.Name.Name,
		//		Def: fmt.Sprintf("%s", suitecase.Camelize(f.Name.Name)),
		Fname: strings.TrimSuffix(fi.Name(), ".go") + "_gen_client.go",
	}

	for _, decl := range f.Decls {
		funcDecl, ok := decl.(*ast.FuncDecl)
		if !ok {
			continue
		}
		if strings.HasSuffix(funcDecl.Name.Name, "ClientFactory") {
			n := strings.TrimPrefix(strings.TrimSuffix(
				funcDecl.Name.Name, "ClientFactory"), "New")
			res.Svc = n
			break
		}
	}
	res.Def = res.Svc == suitecase.Camelize(res.Package)
	renderFile(res)
	return
}

func mk(inputPath string) (res *ThriftCli) {
	abs, _ := filepath.Abs(inputPath)
	baseDir := filepath.Dir(abs)
	filepath.Walk(baseDir, func(path string, f os.FileInfo, inErr error) error {
		if !f.IsDir() && filepath.Dir(path) == baseDir &&
			f.Name() != "ttypes.go" && f.Name() != "constants.go" &&
			!strings.HasSuffix(f.Name(), "_gen_client.go") {
			mkFile(path, f)
			return nil
		} else {
			return nil
		}
	})

	return
}

func renderFile(spec *ThriftCli) {
	f, _ := os.OpenFile(spec.Fname, os.O_WRONLY|os.O_CREATE, 0600)
	generatedTemplate.Execute(f, spec)
	fmt.Println("  ", spec.Fname)

}
